** This gives a glimpse of our development flow

1. Let's learn useState(). Before React 16.8, in any component if we had to use state and setState in a functional component
   then we first had to convert that into a class based component and then use state and setState. Now from React version 16.8
   we can use useState() method inside the function. We are using this now in IngredientForm.js. Note that anything starting 
   with use can be used only inside a functional component and not in class based. Also, in class based if we use state then 
   only a javascript object (and not any other type) can be assigned to the state, whereas anything including the object can 
   be assigned to useState like variables, arrays, objects and so on.
   useState() returns an array of two elements, the first one is the current state (or the updated state) and the second 
   element in the array is function that allows you to update your first element which is the actual state. 
   We get warning if we do update any particular value out of many values in an object like how we do in setState. We'll see 
   why this happens next.

2. The way we use the state is correct (the first element of array is correct) but the way we update the state isn't correct, 
   I mean the second element usage is not correct. There is an important difference between useState second element and the 
   setState.  In setState, whichever part of the object we change will then be merged into existing state where as in useState 
   that doesn't happen. I mean

   setState                                         vs                      useState (update - 2nd element of array)

   state = {                                                                    inputState = useState({ a:'A', b:'B', c:'C'  })
       a:'A',
       b:'B',
       c:'C'
   }

   setState({a:'D'})                                                            inputState[1].a = 'D'

   This will give us new state                                                  This would give us new state
   { a:'D', b:'B', c:'C'  }                                                      {a:'D'}

  * Here the existing state is merged with new state,                     *   Here existing state is not merged with new state,
    old elements are retained.                                                and old elements would be lost.

  * So basically it updates old state                                     *   So basically it replaces old state

  This is what happens in the previous commit and we get the error. First we update the state for the title and that removes the 
  number (amount) property because it replaces the state to have only the title hence we get the warning.

  This is the warning we got in previous commit
  index.js:1406 Warning: A component is changing a controlled input of type number to be uncontrolled. Input elements should not 
  switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncont

  Even though this seems like a bad change there is a reason of flexibility here. So when updating state this way, we need to make
  sure we retain all the properties by just writing the left out properties.

3. But this method of updating the state (using title:inputState[0].title) doesn't guarantee the state update is the latest one. 
   Because react sometimes postpones the state update when lot of animations are going on. So when we use inputState[0] to update 
   the title, we can not be sure we will get the right current state. So this is also not recommended way of doing it. We can 
   instead use function to get access to most updated state and then use that. This is like prevState we used when we accessed 
   state within setState in class based component.

4. inputState[0] is the actual state and inputState[1] is the function used for updating that state. It's confusing to use this 
   kind of representation. Hence we can use the feature of ES6, Array Destructuring. This helps to pull elements out of array
   and assign them to the elements mentioned of left hand side.

   const [inputState,setInputState ] = useState({......})
   Now inputState is the actual state and the setInputState is the function to update the inputState. 

5. All good but did you realise the point mentioned in 2 and 3. Unlike state the useState doesnt merge the non updated elements 
   with updated elements. So in point 3 I told we have to write other properties manually ourselves. Don't you think this is 
   tedious and time consuming. Yes it is. So would it be better if we some how could update only what we want and retain others?
   There is a way! Just use multiple useStates. Yes! that is possible. In this way you can update only the one you need and rest
   will remain the same. So I mean, this time we don't need to have an object but a single variable in the useState and multiple 
   such useStates for different variables.
   So the conclusion is we better need to split our state into multiple useStates using single variables in each unless its very
   necessary that we have some use case to use objects like what we did previously where multiple things change together.

6. The rule with useState or any use** hooks are that they can be used only at the root level and not inside of any loop of 
   function. 

   Not allowed examples:

   if(something){
       useState(); // Not allowed to use this way 
   }

   const submitHandler() {
       useState(); // Not allowed to use this way 
   }

7. Let's now take care of adding the ingredients upon the Add Ingredient button click in IngredientForm. This can be handled in 
   IngredientForm itself but the better place to handle this would be in ingredients because it has access to input and output.

8. Let's now work with removing ingredients.

9. Now it's time to test some react life cycle hooks with functional components. In class based we have componentDidMount, 
   componentWillMount and so on which can't be used in functional component. So, how do we test this. Well we can send some 
   data to backend (we used axios for this in BurgerBuilder, now lets use fetch api given by modern browser, not react). Once 
   we send the data to firebase then we can retreive the data after the component reloads. To retreive the data after the component 
   gets reloaded we used componentDidMount and hence we had to convert the functional component into class based. Now since we use
   react hooks we can implement life cycle hooks differently. 
   So, let's begin with sending the ingredients to backend when clicked on Add Ingredient button using fetch api. There is a small
   difference between fetch and axios which I will mention using comments in the code.

10. Now that we are sending the data to the firebase on click of Add Ingredient button, we will now fetch those ingredients on the 
    app reload. As I said in point 9, we used to do this in componentDidMount in class based. This is done by useEffect hook. 
    This hook runs after the component gets rendered the first time AND for every render cycle (Meaning if something gets modified
    and the component if rerenders again). Watch video. 434. useEffect() and Loading Data.
    You might think we can normally load the ingredients using fetch or axios in the outer level (somewhere after the useState)
    without using it inside useEffect. But the problem is, if we do that then the setInputState (which is setState) changes the state
    and then the  Ingredients component rerenders and then this happens for infinite times creating infinite loop. Hence we do this 
    in useEffect hook. useEffect is enough to replace all the life cycle hooks.

    useEffect (without second arg) by default acts like componentDidUpdate. Which means if there is a state change within useEffect 
    (without second arg) then it rerenders the component and then executes useEffect again there by executes the line which changes 
    the state and so on. This creates an infinite loop as I said. So for our requirement of fetching ingredients, it should be done 
    at once so the useEffect should be run only once. For this we need a second argument with an array of dependencies and if that 
    dependencies change only then the component rerenders and useEffect will run again. Providing empty array as a second argument 
    means that it has no dependencies and it runs only once.

11. What do I mean by dependencies of 2nd argument ? Well take a look here

      useEffect (()={
         console.log("The ingredients are ",userIngredients);
      },[userIngredients])

      Here userIngredients is a dependency that means, we are telling useEffect to rerun only if userIngredients change otherwise it 
      shouldn't run second time.

12. Let's now make the search bar work. If we type Apple in search only Apple should appear if that exists in loadedIngredients. Note
    that we are doing a full search here in this project meaning if we type Apple completely then only the apple appears if it exists.
    Recommended watch video. 436. More on useEffect and 437. what's useCallback() ?
    In the Search component we need to filter the data as per enteredFilter value. Firebase provides the way to do this which we use 
    in useEffect of Search to get the filtered ingredients (filtering by enteredFilter). Adjust rules in the firebase for this. 

13. Getting instant results from backend is good when we type each keystroke to see if there is a matching ingredient, but don't you 
    think this is too much overhead. We can reduce a bit using a small trick, i.e. we would like to send the keys and fetch the results
    only if we pause on typing. I mean if we type Apples and then give some pause (in milliseconds - 500 would be better) then after 
    this time it actually should reach the backend to fetch the results for the entered keys until the pause. Let's do this with 
    setTimeout function. 
    Now there is a doubt, the enteredFilter mentioned inside the setTimeout, is that the enteredFilter before the time started or 
    after the 500 ms? Before the time started it was noting but after 500ms the enteredFilter is Apples, so the doubt is which one 
    is the enteredFilter inside the setTimeout?
    The answer to this is - before the timer started whatever was enteredFilter that is the one. The idea is to compare the enteredFilter
    typed before 500ms and after 500ms and if there is no change then we go and get the results from backend for that letters.
    So, as I told the enteredFilter is the old one before the timer began which needs to be compared with the new one. How do we get 
    the current enteredFilter inside the setTimeout? We do this using useRef. Please watch video 438. Working with Refs and useRefs to 
    get the idea.
    ref of the input (responsible to give the letters in search box) provides the latest letters (you can treat this as current enteredFilter
    after the timer has completed). You can compare the difference between enteredFilter (before timer) and ref (after the timer) and 
    if there is no change that means user paused by typing something and wants the result for that so after the timer we send the 
    http request to backend to get the result for the changed elements.
      
      setTimeout(()=>{},500); ---> The function (before ,) executes after 500ms

    Also, if we do this, then after a pause of 500ms we get the results which is good. But what if we starting typing again after the 
    pause? This calls the useEffect again and the new timer gets created again. Though you dont see the difference in working of the 
    app, this creates a memory overhead because of stacking up of old timers. We need to clear old timers. 

    How to clear timers ? 
    Note about setTimeout function and useEffect here.
    * setTimeout - setTimeout can be assigned to a const which can be used later. This is necessary to clear the previous setTimeout.
    * useEffect - useEffect can return a function and inside that function we clear out the previous timer mentioned in above point. 
      This happens when the useEffect is called the second time. But what if useEffect is called only once with [] dependencies. In 
      this case the return function of setTimeout is called during unmounting of component and we dont have to worry about this.

14. removeIngredientHandler removes the clicked ingredient from the UI but doesnt actually remove it from firebase. Let's now work 
    on removing from firebase as well when we click on any ingredient.

15. While fetching or deleting the ingredient from firebase it would be good if we can show some spinner. Let's also handle error 
    in the catch block if something goes wrong.
    State updates are batched if they are in same synchronous code block. What I mean is let's say you have a block like below

    const xy=() =>{

       setName('Manu');
       setAge('30');
    }
    Generally we think each setSomething should run a render cycle. But remember if the setSomething1 followed by setSomething2 and 
    so on are in the same synchronous block (that is important - sync block and not async block), then only one render cycle takes 
    place. To understand this see below,

    const xy=() =>{
       console.log(name); //prints Manu for example
       setName('Max');
       console.log(name); // what should this print Max or Manu
    }
   You could think that accessing the name state after setName('Max'); should yield the new value (e.g. 'Max') but this is NOT the 
   case. Keep in mind, that the new state value is only available in the next component render cycle 
   (which gets scheduled by calling setName()).

16. Let's see what is useReducer() for. Before we start note that useReducer has nothing to do with redux library, but the concept
    of type and action as used in reducer remains same. Now what is useReducer() ?
    useReducer is an alternative way to manage the state (alternative way to useState). useReducer functionality is similar to 
    the code we write in reducer like we write different cases and dispatch the actions. 
    With functional based components we can do this with useReducer. I've mentioned what is initial state and everything in the 
    Ingredients.js component where we use useReducer as an alternative to the useState of userIngredients. Refer video. 443. 
    Understanding useReducers. 

17. Let's do this for error and sending http request useState. Let's now convert them to use useReducer. Both of these have two 
    separate useState but we can combine them into single useReducer because both are interconnected. That is the power of 
    using useReducer.

18. Let's now work with context api (useContext). To understand this lets discuss what is props chain. Let's say I have the
    components A, B and C.

             A                                        B                                      C        
    Where the login handler is            B doesn't need the login prop           C has to get the login info to show something
    and the login state is changed        but since C needs, this just forwards          
    here                                  to C 

    Now imagine there might be some 5 to 6 components between A and C where none of the components need this login info except 
    for C. In this case all the components still need to get the login info from A just to pass it to C. In this case there is 
    a useful method what context featur gives.

    Context is basically a javascript object/array/variable that is available globally. Actually we can decide where that needs
    to be available (in whichever component you like) and doesn't require to pass as props. We create a separate file for this 
    and write the code for the context. Once the context is created, if we want to use it in any component then we need to wrap 
    that parts of component where we need to use it with a .Provider on the component A (this is the component that has the value), 
    and we use .Consumer in the destination component C where we use that. Here in the consumer the jsx is rendered inside a function 
    and not directly as jsx, I mean like below.
    
     <AuthContext.Consumer>
     {
        (context)=>{
            jsx code which uses the context instead of props
        }
     }
     </AuthAuthContext.Consumer>

   This is the case if we want to access it within jsx. What if we need to access it within a function like componentDidMount? 
   We can't access  <AuthContext.Consumer> but we have static method contextType (for classbased) and useContext for hooks.
    
   Refer to the video 113. Using the Context api and its next video 114. contextType and useContext, also video 445. Working 
   with useContext() for better understanding if not clear.

19. Let's focus on performance optimization. useMemo() hook helps us doing that. Consider Ingredients component. Whenever the 
    Ingredients component renders the functions in there like addIngredientHandler(), removeIngredientHandler() gets created. 
    These inturn are passed as props to the IngredientForm and IngredientList respectively. There by these components are also 
    rendered again (note that these components are rendered even when react memo is used, because everytime the 
    addIngredientHandler is created and the react memo inside the IngredientForm treats it as a new one hence the react memo 
    allows IngredientForm to re-render. If we use useCallback on addIngredientHandler and removeIngredientHandler then the 
    useCallback will not let the addIngredientHandler and removeIngredientHandler recreate and hence the react memo avoids 
    the old one to be stopped). 
    This leads to poor performance (though it is not a big deal for such a small app but the concept 
    remains same for the big apps). We can use useMemo() hook like how we use useCallback to wrap the addIngredientHandler and 
    removeIngredientHandler kind of components. You can check this by adding a console.log in IngredientForm.
    We can use useMemo on the particular value or a function (useCallback is used on functions) if we dont want to use react memo in 
    the child component. 
    In our example we are using both the approaches of using useCallback on addIngredientHandler thus using react memo in child 
    component, and also the second approach is used where the useMemo is used on the <IngredientList/> in Ingredients (parent) and 
    no react memo is used in the child component. 

    So overall the idea of react memo, useCallback, and useMemo is to avoid unnecessary re-render cycles. We need to think
    if the component really needs to re-render or not and implement these functionalities accordingly.

    useCallback is a hook where the FUNCTION is not recreated if the dependency don't change and the useMemo is a hook where a VALUE 
    is not recreated if dependency don't change.